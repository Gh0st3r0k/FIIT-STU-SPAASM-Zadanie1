section .bss
    global fd, num_line
    global digit_counts, lower_counts, upper_counts, other_counts
    global flag_r, flag_h  ; –§–ª–∞–≥–∏ -r –∏ -h

    fd          resq 1
    ;num_line    resq 1

    digit_counts resq 100
    lower_counts resq 100
    upper_counts resq 100
    other_counts resq 100

    flag_r  resb 1  ; –§–ª–∞–≥ -r
    flag_h  resb 1  ; –§–ª–∞–≥ -h

    global buffer
    buffer resb 396

section .text
global print_args, process_file, print_flags, print_results
extern print_new_line, print_message, print_number, analyze_line, msg_file_error, msg_file_found
extern digit_count, lower_count, upper_count, other_count
extern strlen

print_args:

    push rbp
    mov rbp, rsp

    mov byte [flag_r], 0
    mov byte [flag_h], 0

    mov rcx, rdi   ; –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (argc)
    dec rcx        ; –£–±–∏—Ä–∞–µ–º –∏–º—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
    jz .no_args    ; –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ‚Äî –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ

    mov rbx, rsi   ; –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤

.next_arg:
    add rbx, 8     ; –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞—Ä–≥—É–º–µ–Ω—Ç—É
    mov rax, [rbx] ; –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç
    cmp rax, 0
    je .done       ; –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º

    mov rdi, rax
    mov dl, [rdi]
    cmp dl, '-'    ; –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç —Ñ–ª–∞–≥–æ–º
    jne .process_file  ; –ï—Å–ª–∏ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç, —ç—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞

    ;mov rsi, msg_user
    ;call print_message

    add rdi, 1
    cmp byte [rdi], 'r'
    je .set_r_flag
    cmp byte [rdi], 'h'
    je .set_h_flag
    jmp .skip_print

.set_r_flag:
    mov byte [flag_r], 1
    jmp .skip_print

.set_h_flag:
    mov byte [flag_h], 1
    jmp .skip_print

.process_file:
    mov rsi, rax  ; –ü–µ—Ä–µ–¥–∞—ë–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ rsi
    call process_file  ; –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
    jmp .skip_print

.done:
    jmp .print_flags

.no_args:
    mov rsi, msg_no_args
    jmp .done_flags

.skip_print:
    dec rcx
    ;mov rbx, rsi
    jmp .next_arg


.print_flags:
    mov rbp, rsp   ; <-- –£–±–∏—Ä–∞–µ–º `push rbp`, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –±—ã–ª –≤ `print_args`

    ; –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ -r
    mov al, [flag_r]
    cmp al, 0
    jne .flag_r_is_set
    mov rsi, msg_r_not_set
    jmp .print_flag_res

.flag_r_is_set:
    mov rsi, msg_r_set

.print_flag_res:
    call print_message

    ; –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ -h (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!)
    mov al, [flag_h]
    cmp al, 0
    jne .flag_h_is_set
    mov rsi, msg_h_not_set
    jmp .done_flags

.flag_h_is_set:
    mov rsi, msg_h_set

.done_flags:
    call print_message

    mov rsi, msg_end
    call print_message

    pop rbp   ; <-- –ß–Å–¢–ö–û –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –°–¢–ï–ö
    ret       ; <-- –¢–ï–ü–ï–†–¨ –ù–ï –£–ü–ê–î–Å–¢


process_file:
    push rbp
    mov rbp, rsp
    sub rsp, 16

    ; –í—ã–≤–æ–¥–∏–º –∏–º—è —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º (–û–¢–õ–ê–î–ö–ê)
    mov rdi, rsi
    call print_message
    call print_new_line
    ;mov rsi, msg_newline
    ;call print_message
    ;mov rsi, rdi  

    ; –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —á—Ç–µ–Ω–∏–µ
    mov rdi, rsi  ; –ò–º—è —Ñ–∞–π–ª–∞ —É–∂–µ –≤ rsi
    mov rax, 2    ; sys_open
    mov rsi, 0    ; –¢–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
    syscall

    ; –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã–ª—Å—è –ª–∏ —Ñ–∞–π–ª
    cmp rax, 0
    jl .file_error  ; –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ

    mov [fd], rax
    jmp .success

.file_error:
    mov rsi, msg_error_code
    call print_message
    mov rdi, rax  ; –ö–æ–¥ –æ—à–∏–±–∫–∏
    call print_number  ; –í—ã–≤–µ–¥–µ–º –µ–≥–æ
    mov rsi, msg_file_error
    call print_message
    jmp .exit

.success:
    push rbx

    mov rsi, msg_file_found
    call print_message  ; –í—ã–≤–æ–¥–∏–º "–§–∞–π–ª –Ω–∞–π–¥–µ–Ω"

    ;mov qword [num_line], 0  ; –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ = 0

.read_loop:
    ; –ß–∏—Ç–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞ –≤ buffer
    mov rdi, [fd]
    mov rsi, buffer
    mov rdx, 396
    mov rax, 0
    syscall
    cmp rax, 0
    jle .close_file  ; –ï—Å–ª–∏ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞, –∑–∞–∫—Ä—ã–≤–∞–µ–º

    mov rsi, buffer
    mov rbx, rsi  ; rbx = –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏

.next_char:
    mov al, [rsi]
    cmp al, 0
    je .done_processing  ; –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ –±—É—Ñ–µ—Ä–∞, –≤—ã—Ö–æ–¥–∏–º

    cmp al, 10  ; '\n' (–∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏?)
    je .print_line

    inc rsi
    jmp .next_char

.print_line:

    push rsi
    mov byte [rsi], 0  ; –ó–∞–º–µ–Ω—è–µ–º '\n' –Ω–∞ 0 (–∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏)



    ; –í—ã–≤–æ–¥–∏–º "–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: —Å—Ç—Ä–æ–∫–∞"
    mov rsi, msg_line_num
    call print_message

    mov rdi, [num_line]  ; ‚úÖ –í—ã–≤–æ–¥–∏–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
    call print_number

    mov rsi, msg_colon
    call print_message

    mov rsi, rbx   ; ‚úÖ –í—ã–≤–æ–¥–∏–º —Å–∞–º—É —Å—Ç—Ä–æ–∫—É
    call print_message

    call print_new_line  ; ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É

    inc qword [num_line]  ; ‚úÖ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
    pop rsi
.next_line:
    inc rsi           ; ‚úÖ –î–≤–∏–≥–∞–µ–º—Å—è –≤–ø–µ—Ä—ë–¥
    cmp byte [rsi], 0 ; ‚úÖ –ü–æ–∫–∞ `rsi` —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ `\0`
    je .next_line     ; ‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ `\0`

    test rsi, rsi
    jz .done_processing  ; ‚úÖ –ï—Å–ª–∏ `rsi == 0`, –∑–Ω–∞—á–∏—Ç —Ñ–∞–π–ª –∑–∞–∫–æ–Ω—á–∏–ª—Å—è

    mov rbx, rsi  ; ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    jmp .next_char

.done_processing:
    jmp .read_loop  ; ‚úÖ –ß–∏—Ç–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫—É—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö

.close_file:
    mov rdi, [fd]
    mov rax, 3
    syscall

.exit:
    mov rsi, msg_exit_process
    call print_message

    pop rbx


    leave
    ;add rsp, 32
    ;pop rbp
    ret






print_results:
    push rbp
    mov rbp, rsp
    sub rsp, 16

    mov rcx, 0

.loop:
    ; cmp rcx, [num_line]
    jge .done

    mov rdi, rcx
    inc rdi
    call print_number

    mov rsi, msg_digits
    call print_message
    mov rdi, [digit_counts + rcx * 8]
    call print_number

    mov rsi, msg_lower
    call print_message
    mov rdi, [lower_counts + rcx * 8]
    call print_number

    mov rsi, msg_upper
    call print_message
    mov rdi, [upper_counts + rcx * 8]
    call print_number

    mov rsi, msg_other
    call print_message
    mov rdi, [other_counts + rcx * 8]
    call print_number

    inc rcx
    jmp .loop

.done:
    add rsp, 16
    pop rbp
    ret

section .data
    newline db 0x0A
    msg_digits db " –¶–∏—Ñ—Ä—ã=", 0
    msg_lower  db " —Å—Ç—Ä–æ—á–Ω—ã–µ=", 0
    msg_upper  db " –∑–∞–≥–ª–∞–≤–Ω—ã–µ=", 0
    msg_other  db " –¥—Ä—É–≥–∏–µ=", 0
    msg_r_set db "–§–ª–∞–≥ -r —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 0x0A, 0
    msg_r_not_set db "–§–ª–∞–≥ -r –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 0x0A, 0
    msg_h_set db "–§–ª–∞–≥ -h —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 0x0A, 0
    msg_h_not_set db "–§–ª–∞–≥ -h –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 0x0A, 0
    msg_no_args db "–ê—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç", 0x0A, 0
    msg_error_code db "–ö–æ–¥ –æ—à–∏–±–∫–∏: ", 0
    msg_end db "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ print_flags", 0x0A, 0
    msg_newline db 0x0A, 0
    msg_user db "–ó–æ–ª–æ—Ç–∞—è —á–∞—à–∞, –∑–æ–ª–æ—Ç–∞–∞–∞–∞–∞–∞—è—è—è—è—è", 0x0A, 0
    msg_line_num db "–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: ", 0
    msg_colon db ": ", 0
    msg_debug db "üõ† –í—ã–∑–æ–≤ print_line", 0x0A, 0  ; üõ† –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    num_line dq 0
    msg_exit_process db "–í—ã—Ö–æ–¥ –∏–∑ process_file", 0x0A, 0
